import asyncio
import sqlite3
from contextlib import closing
from datetime import datetime, timezone
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F, html
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    Message,
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, KeyboardButtonRequestUser,
    CallbackQuery, BotCommand
)
from aiogram.types import BotCommandScopeAllPrivateChats, BotCommandScopeAllGroupChats
from aiogram.enums import ChatType
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

BOT_TOKEN = "–í–°–¢–ê–í–¨_–°–í–û–ô_–¢–û–ö–ï–ù"
DEFAULT_TZ = "Europe/Moscow"
DB_PATH = "bot.db"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ------------------
with closing(sqlite3.connect(DB_PATH)) as conn:
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_id INTEGER UNIQUE,
            username TEXT,
            tz TEXT,
            weekdays_only INTEGER DEFAULT 1
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            assignee_tg_id INTEGER,
            assignee_username TEXT,
            chat_id INTEGER,
            text TEXT,
            is_done INTEGER DEFAULT 0,
            created_at TEXT
        )
    """)
    conn.commit()

# ------------------ DB HELPERS ------------------
def db_execute(query: str, params: tuple = ()) -> None:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        c = conn.cursor()
        c.execute(query, params)
        conn.commit()

def db_fetchone(query: str, params: tuple = ()):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        c.execute(query, params)
        return c.fetchone()

def db_fetchall(query: str, params: tuple = ()):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        c.execute(query, params)
        return c.fetchall()

def upsert_user(tg_id: int, username: str | None):
    row = db_fetchone("SELECT tg_id FROM users WHERE tg_id=?", (tg_id,))
    if row:
        db_execute("UPDATE users SET username=? WHERE tg_id=?", (username, tg_id))
    else:
        db_execute(
            "INSERT INTO users (tg_id, username, tz, weekdays_only) VALUES (?, ?, ?, 1)",
            (tg_id, username, DEFAULT_TZ),
        )

def set_user_tz(tg_id: int, tz: str):
    db_execute("UPDATE users SET tz=? WHERE tg_id=?", (tz, tg_id))

def get_user_tz(tg_id: int) -> str:
    row = db_fetchone("SELECT tz FROM users WHERE tg_id=?", (tg_id,))
    return row["tz"] if row and row["tz"] else DEFAULT_TZ

def set_weekdays_only(tg_id: int, value: bool):
    db_execute("UPDATE users SET weekdays_only=? WHERE tg_id=?", (1 if value else 0, tg_id))

def get_weekdays_only(tg_id: int) -> bool:
    row = db_fetchone("SELECT weekdays_only FROM users WHERE tg_id=?", (tg_id,))
    return bool(row["weekdays_only"]) if row else True

def add_task(assignee_tg_id: int | None, assignee_username: str | None, chat_id: int, text: str):
    db_execute(
        "INSERT INTO tasks (assignee_tg_id, assignee_username, chat_id, text, created_at) "
        "VALUES (?, ?, ?, ?, ?)",
        (assignee_tg_id, assignee_username, chat_id, text.strip(), datetime.now(timezone.utc).isoformat()),
    )

def list_tasks_for_user(tg_id: int):
    return db_fetchall(
        "SELECT id, text FROM tasks WHERE is_done=0 AND assignee_tg_id=? ORDER BY id ASC",
        (tg_id,),
    )

def mark_done(task_id: int, tg_id: int) -> bool:
    row = db_fetchone("SELECT assignee_tg_id FROM tasks WHERE id=?", (task_id,))
    if not row:
        return False
    if row["assignee_tg_id"] and row["assignee_tg_id"] != tg_id:
        return False
    db_execute("UPDATE tasks SET is_done=1 WHERE id=?", (task_id,))
    return True

# ------------------ –£–¢–ò–õ–ò–¢–´: —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –õ–° ------------------
async def try_delete(message: Message):
    """–£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–∞—Ö (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º Delete messages)."""
    try:
        if message.chat.type in {ChatType.GROUP, ChatType.SUPERGROUP}:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass

async def dm(user_id: int, text: str, **kwargs) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–∏—á–∫—É; –≤–µ—Ä–Ω—ë—Ç False, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç –õ–° —Å –±–æ—Ç–æ–º."""
    try:
        await bot.send_message(chat_id=user_id, text=text, **kwargs)
        return True
    except Exception:
        return False

async def reply_privately_or_hint(message: Message, text: str, **kwargs):
    """–ü—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –ª–∏—á–∫—É; –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –¥–∞—ë–º –∫—Ä–∞—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –≥—Ä—É–ø–ø–µ –∏ —É–¥–∞–ª—è–µ–º –µ—ë —á–µ—Ä–µ–∑ 5 —Å–µ–∫."""
    sent = await dm(message.from_user.id, text, **kwargs)
    if sent:
        return
    hint = await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É: –æ—Ç–∫—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏ Start.")
    try:
        await asyncio.sleep(5)
        await hint.delete()
    except Exception:
        pass

# ------------------ –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò –î–õ–Ø /list ------------------
def tasks_keyboard(rows):
    buttons = [[InlineKeyboardButton(text=f"‚úÖ –ó–∞–∫—Ä—ã—Ç—å {r['id']}", callback_data=f"done:{r['id']}")] for r in rows]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ------------------ MENU BUTTON (–Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å) ------------------
PENDING_ASSIGN: dict[int, int] = {}  # –∫—Ç–æ -> –∫–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ–º (–≤—ã–±—Ä–∞–Ω–Ω—ã–π user_id)

def build_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", request_user=KeyboardButtonRequestUser(request_id=1))],
            [KeyboardButton(text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
            [KeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")],
            [KeyboardButton(text="üìÖ –ë—É–¥–Ω–∏ on/off"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# ------------------ BOT COMMANDS (–∫–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª —É –ø–æ–ª—è –≤–≤–æ–¥–∞) ------------------
PRIVATE_COMMANDS = [
    BotCommand(command="task",    description="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ"),
    BotCommand(command="list",    description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏"),
    BotCommand(command="done",    description="–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID"),
    BotCommand(command="settz",   description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"),
    BotCommand(command="weekdays",description="–ë—É–¥–Ω–∏ on/off"),
    BotCommand(command="help",    description="–°–ø—Ä–∞–≤–∫–∞"),
]
GROUP_COMMANDS = [
    BotCommand(command="task",    description="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ"),
    BotCommand(command="list",    description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏"),
    BotCommand(command="done",    description="–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID"),
    BotCommand(command="help",    description="–°–ø—Ä–∞–≤–∫–∞"),
]

async def setup_bot_commands(bot: Bot):
    await bot.set_my_commands(PRIVATE_COMMANDS, scope=BotCommandScopeAllPrivateChats())
    await bot.set_my_commands(GROUP_COMMANDS, scope=BotCommandScopeAllGroupChats())

# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    upsert_user(message.from_user.id, message.from_user.username)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ö–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        "–ù–∏–∂–µ –≤–∫–ª—é—á–∏–ª —É–¥–æ–±–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á.",
        reply_markup=build_menu_kb()
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await try_delete(message)
    text = (
        "üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n"
        "‚Ä¢ üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –≤—ã–±–µ—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "‚Ä¢ /task <—Ç–µ–∫—Å—Ç> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ\n"
        "‚Ä¢ /list ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á (–∑–∞–∫—Ä—ã–≤–∞–π –∫–Ω–æ–ø–∫–∞–º–∏)\n"
        "‚Ä¢ /done <id> ‚Äî –∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID\n"
        "‚Ä¢ /settz <IANA_TZ> ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Moscow)\n"
        "‚Ä¢ /weekdays on|off ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –±—É–¥–Ω—è–º\n\n"
        "‚ö†Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—é."
    )
    await reply_privately_or_hint(message, text)

@dp.message(Command("settz"))
async def cmd_settz(message: Message, command: CommandObject):
    await try_delete(message)
    upsert_user(message.from_user.id, message.from_user.username)

    tz = (command.args or "").strip()
    try:
        if not tz:
            raise ValueError("empty")
        ZoneInfo(tz)
        set_user_tz(message.from_user.id, tz)
        await reply_privately_or_hint(message, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {html.quote(tz)}")
    except Exception:
        await reply_privately_or_hint(message, "–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IANA TZ, –Ω–∞–ø—Ä–∏–º–µ—Ä: Europe/Moscow")

@dp.message(Command("weekdays"))
async def cmd_weekdays(message: Message, command: CommandObject):
    await try_delete(message)
    upsert_user(message.from_user.id, message.from_user.username)

    arg = (command.args or "").strip().lower()
    if arg not in {"on", "off"}:
        current = "on" if get_weekdays_only(message.from_user.id) else "off"
        await reply_privately_or_hint(message, f"–°–µ–π—á–∞—Å: {current}. –ò—Å–ø–æ–ª—å–∑—É–π: /weekdays on|off")
        return
    set_weekdays_only(message.from_user.id, arg == "on")
    await reply_privately_or_hint(
        message,
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –±—É–¥–Ω—è–º: –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if arg == "on" else "–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∂–µ –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ"
    )

@dp.message(Command("task"))
async def cmd_task(message: Message, command: CommandObject):
    await try_delete(message)
    upsert_user(message.from_user.id, message.from_user.username)

    text = (command.args or "").strip()
    if not text:
        await reply_privately_or_hint(message, "–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É: /task <—Ç–µ–∫—Å—Ç>")
        return
    add_task(message.from_user.id, message.from_user.username, message.chat.id, text)
    await reply_privately_or_hint(message, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –û—Ç–∫—Ä–æ–π /list, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ.")

@dp.message(Command("list"))
async def cmd_list(message: Message):
    await try_delete(message)
    upsert_user(message.from_user.id, message.from_user.username)

    rows = list_tasks_for_user(message.from_user.id)
    if not rows:
        await reply_privately_or_hint(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á ‚ú®")
        return

    lines = [f"{r['id']}. {html.quote(r['text'])}" for r in rows]
    text = "–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n" + "\n".join(lines)
    await reply_privately_or_hint(message, text, reply_markup=tasks_keyboard(rows))

@dp.message(Command("done"))
async def cmd_done(message: Message, command: CommandObject):
    await try_delete(message)
    upsert_user(message.from_user.id, message.from_user.username)

    if not command.args or not command.args.isdigit():
        await reply_privately_or_hint(message, "–£–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏: /done <id>")
        return
    ok = mark_done(int(command.args), message.from_user.id)
    await reply_privately_or_hint(message, "–ì–æ—Ç–æ–≤–æ ‚úÖ" if ok else "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É")

# ------------------ INLINE-–ö–ù–û–ü–ö–ò ¬´–ó–ê–ö–†–´–¢–¨¬ª (–≤ –õ–°) ------------------
@dp.callback_query(F.data.startswith("done:"))
async def on_done_click(callback: CallbackQuery):
    task_id_str = callback.data.split(":", 1)[1]
    if not task_id_str.isdigit():
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=False)
        return

    ok = mark_done(int(task_id_str), callback.from_user.id)
    if not ok:
        await callback.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç–≤–æ—è)", show_alert=False)
        return

    rows = list_tasks_for_user(callback.from_user.id)
    if rows:
        lines = [f"{r['id']}. {html.quote(r['text'])}" for r in rows]
        text = "–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n" + "\n".join(lines)
        await callback.message.edit_text(text, reply_markup=tasks_keyboard(rows))
    else:
        await callback.message.edit_text("–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–∫—Ä—ã—Ç—ã üéâ")
    await callback.answer("–ó–∞–∫—Ä—ã—Ç–æ ‚úÖ", show_alert=False)

# ------------------ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ß–ï–†–ï–ó –ü–ò–ö–ï–† –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ------------------
@dp.message(F.user_shared)
async def on_user_shared(message: Message):
    assignee_id = message.user_shared.user_id
    PENDING_ASSIGN[message.from_user.id] = assignee_id

    upsert_user(message.from_user.id, message.from_user.username)
    upsert_user(assignee_id, None)

    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

@dp.message(F.text == "‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ")
async def menu_task_self(message: Message):
    # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    await message.answer("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –¥–ª—è —Å–µ–±—è —Ç–∞–∫: /task <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>")

@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def menu_list_btn(message: Message):
    await cmd_list(message)

@dp.message(F.text == "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É")
async def menu_done_btn(message: Message):
    await message.answer("–ó–∞–∫—Ä—ã—Ç—å: /done <id> –∏–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Å–ø–∏—Å–∫–µ")

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def menu_help_btn(message: Message):
    await cmd_help(message)

@dp.message(F.text == "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
async def menu_tz_btn(message: Message):
    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: /settz <IANA_TZ> (–Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Moscow)")

@dp.message(F.text == "üìÖ –ë—É–¥–Ω–∏ on/off")
async def menu_weekdays_btn(message: Message):
    await message.answer("–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –±—É–¥–Ω—è–º: /weekdays on|off")

# –°–ª–µ–¥—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
@dp.message(F.text)
async def on_any_text(message: Message):
    assignee_id = PENDING_ASSIGN.pop(message.from_user.id, None)
    if assignee_id is None:
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–∏–∫–µ—Ä

    text = (message.text or "").strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç–æ–π. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π.")
        return

    add_task(assignee_tg_id=assignee_id, assignee_username=None, chat_id=message.chat.id, text=text)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–û—Ç–∫—Ä–æ–π /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏.")

# ------------------ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ------------------
async def send_daily_summaries():
    rows = db_fetchall("""
        SELECT DISTINCT u.tg_id, COALESCE(u.tz, ?) AS tz, COALESCE(u.weekdays_only, 1) AS weekdays_only
        FROM tasks t
        JOIN users u ON u.tg_id = t.assignee_tg_id
        WHERE t.is_done=0 AND t.assignee_tg_id IS NOT NULL
    """, (DEFAULT_TZ,))
    for r in rows:
        tg_id = r["tg_id"]
        tz = r["tz"]
        weekdays_only = bool(r["weekdays_only"])
        if weekdays_only and datetime.now(ZoneInfo(tz)).weekday() >= 5:  # 5,6 = –°–±,–í—Å
            continue

        tasks = list_tasks_for_user(tg_id)
        if not tasks:
            continue

        lines = [f"{row['id']}. {html.quote(row['text'])}" for row in tasks]
        now_local = datetime.now(ZoneInfo(tz)).strftime("%Y-%m-%d %H:%M")
        text = (
            f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ({now_local} {tz})\n"
            "–¢–≤–æ–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join(lines) +
            "\n\n–ó–∞–∫—Ä—ã–≤–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ /list –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /done <id>"
        )
        try:
            await bot.send_message(chat_id=tg_id, text=text)
        except Exception:
            pass

def schedule_jobs(scheduler: AsyncIOScheduler):
    scheduler.add_job(
        send_daily_summaries,
        CronTrigger(hour=10, minute=0, timezone=ZoneInfo(DEFAULT_TZ)),
        id="daily_summaries",
        replace_existing=True,
    )

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def main():
    scheduler = AsyncIOScheduler(timezone=ZoneInfo(DEFAULT_TZ))
    schedule_jobs(scheduler)
    scheduler.start()

    await setup_bot_commands(bot)

    print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
