"""
Telegram Task Bot ‚Äî fresh start (aiogram 2.x)

–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–≤–æ–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—â–∏–π —á–∞—Ç.
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –æ–±—â–µ–º —á–∞—Ç–µ –ø–æ —Ä–µ–ø–ª–∞—é –∏ —Å—Ä–∞–∑—É —É—Ö–æ–¥–∏—Ç –≤ –õ–° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É.
- /menu –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ, —É–¥–∞–ª—è—é—Ç—Å—è –∏ –æ—Ç–≤–µ—Ç —É—Ö–æ–¥–∏—Ç –≤ –õ–°.
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 10:00 –ø–æ –±—É–¥–Ω—è–º (Europe/Stockholm).

ENV:
BOT_TOKEN=8299026874:AAH0uKNWiiqGqi_YQl2SWDhm5qr6Z0Vrxvw
TZ=Europe/Stockholm

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
aiogram==2.25.1
APScheduler==3.10.4
python-dotenv==1.0.1
aiosqlite==0.20.0
pytz==2024.1
"""

import asyncio
import logging
import os
from dataclasses import dataclass
from datetime import datetime
from typing import Optional, List, Tuple

import aiosqlite
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    BotCommand,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils import executor
from aiogram.utils.markdown import quote_html
from dotenv import load_dotenv

# -------------------------------------------------
# Config
# -------------------------------------------------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
TZ = os.getenv("TZ", "Europe/Stockholm")

if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is not set. Put it in .env")

logger = logging.getLogger("ussbot")
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")

# -------------------------------------------------
# Data layer (SQLite)
# -------------------------------------------------
DB_PATH = "tasks.db"

CREATE_TABLE_SQL = """
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER NOT NULL,
    assigner_id INTEGER NOT NULL,
    assignee_id INTEGER NOT NULL,
    text TEXT NOT NULL,
    created_at TEXT NOT NULL,
    due_date TEXT,
    is_done INTEGER NOT NULL DEFAULT 0
);
"""

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(CREATE_TABLE_SQL)
        await db.commit()

async def add_task(chat_id: int, assigner_id: int, assignee_id: int, text: str, due_date: Optional[str] = None) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "INSERT INTO tasks (chat_id, assigner_id, assignee_id, text, created_at, due_date, is_done) "
            "VALUES (?,?,?,?,?,?,0)",
            (chat_id, assigner_id, assignee_id, text.strip(), datetime.utcnow().isoformat(), due_date),
        )
        await db.commit()
        return cur.lastrowid

async def list_tasks_for_assignee(assignee_id: int, only_open: bool = True) -> List[Tuple]:
    q = "SELECT id, chat_id, text, created_at, due_date, is_done FROM tasks WHERE assignee_id=?"
    if only_open:
        q += " AND is_done=0"
    q += " ORDER BY id DESC"
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(q, (assignee_id,))
        return await cur.fetchall()

async def mark_done(task_id: int) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("UPDATE tasks SET is_done=1 WHERE id=?", (task_id,))
        await db.commit()
        return cur.rowcount > 0

# -------------------------------------------------
# Bot setup
# -------------------------------------------------
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# -------------------------------------------------
# Utilities
# -------------------------------------------------
@dataclass
class Ctx:
    tz: pytz.BaseTzInfo

ctx = Ctx(tz=pytz.timezone(TZ))

async def safe_delete(message: types.Message):
    """Try to delete user's command to keep the group clean."""
    try:
        await message.delete()
    except Exception:
        pass  # not admin / can't delete here

# -------------------------------------------------
# Menus
# -------------------------------------------------
def menu_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="menu_assign"),
        InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="menu_mytasks"),
    )
    return kb

async def send_menu_dm(user_id: int):
    text = (
        "<b>–ú–µ–Ω—é</b>\n\n"
        "‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è <b>–≤ –≥—Ä—É–ø–ø–µ</b> –ø–æ —Ä–µ–ø–ª–∞—é: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ\n"
        "  <code>/assign —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏</code>. –ö–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞; –≤ –æ–±—â–∏–π —á–∞—Ç –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ—Ç.\n\n"
        "‚Ä¢ –í –ª–∏—á–∫–µ –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–º–µ—á–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏.\n"
    )
    await bot.send_message(user_id, text, reply_markup=menu_kb(), disable_web_page_preview=True)

# -------------------------------------------------
# Commands
# -------------------------------------------------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await init_db()
    # –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—è–µ–º –∏ —à–ª—ë–º –º–µ–Ω—é –≤ –õ–° –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
    if message.chat.type in (types.ChatType.GROUP, types.ChatType.SUPERGROUP):
        await safe_delete(message)
        try:
            await bot.send_message(
                message.from_user.id,
                "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥–∞—é –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –ø–æ –±—É–¥–Ω—è–º –≤ 10:00 (Europe/Stockholm)."
                "\n–í –æ–±—â–∏–π —á–∞—Ç —è –Ω–∏—á–µ–≥–æ –ø–∏—Å–∞—Ç—å –Ω–µ –±—É–¥—É ‚Äî –≤—Å—ë —É—Ö–æ–¥–∏—Ç –≤ –õ–°.",
            )
            await send_menu_dm(message.from_user.id)
        except Exception:
            pass
        return

    # –í –ª–∏—á–∫–µ ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥–∞—é –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –ø–æ –±—É–¥–Ω—è–º –≤ 10:00 (Europe/Stockholm)."
        "\n–í –æ–±—â–∏–π —á–∞—Ç —è –Ω–∏—á–µ–≥–æ –ø–∏—Å–∞—Ç—å –Ω–µ –±—É–¥—É ‚Äî –≤—Å—ë —É—Ö–æ–¥–∏—Ç –≤ –õ–°."
    )
    await send_menu_dm(message.from_user.id)

@dp.message_handler(commands=["menu"])
async def cmd_menu(message: types.Message):
    # –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ —à–ª—ë–º –º–µ–Ω—é –≤ –õ–° –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
    if message.chat.type in (types.ChatType.GROUP, types.ChatType.SUPERGROUP):
        await safe_delete(message)
        try:
            await send_menu_dm(message.from_user.id)
        except Exception:
            pass
        return
    # –í –ª–∏—á–∫–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç—É—Ç
    await send_menu_dm(message.chat.id)

@dp.message_handler(commands=["assign"])
async def cmd_assign(message: types.Message):
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –ø–æ —Ä–µ–ø–ª–∞—é. –ë–æ—Ç –Ω–µ –ø–∏—à–µ—Ç –≤ –æ–±—â–∏–π —á–∞—Ç.
    if message.chat.type not in (types.ChatType.GROUP, types.ChatType.SUPERGROUP):
        await message.answer("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –ø–æ —Ä–µ–ø–ª–∞—é. –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –≤ –õ–°: /menu")
        return

    # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –≤ –≥—Ä—É–ø–ø–µ
    await safe_delete(message)

    if not message.reply_to_message or not message.reply_to_message.from_user:
        # –°–æ–æ–±—â–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –≤ –õ–°, –Ω–µ –ø–∏—à–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç
        try:
            await bot.send_message(
                message.from_user.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ <b>—Ä–µ–ø–ª–∞–µ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /assign <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>."
            )
        except Exception:
            pass
        return

    assignee = message.reply_to_message.from_user
    assignee_id = assignee.id
    assigner_id = message.from_user.id
    task_text = message.get_args().strip()

    if not task_text:
        try:
            await bot.send_message(assigner_id, "–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /assign <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>")
        except Exception:
            pass
        return

    task_id = await add_task(
        chat_id=message.chat.id,
        assigner_id=assigner_id,
        assignee_id=assignee_id,
        text=task_text
    )

    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é ‚Äî –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤ –õ–°
    try:
        await bot.send_message(
            assignee_id,
            f"üÜï –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ <b>#{task_id}</b>:\n‚Äî {quote_html(task_text)}"
        )
    except Exception:
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –æ—Ç–∫—Ä—ã–ª –±–æ—Ç–∞ ‚Äî —Å–æ–æ–±—â–∏–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
        try:
            await bot.send_message(
                assigner_id,
                (
                    f"–ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.\n"
                    f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ <a href=\"tg://user?id={assignee_id}\">{quote_html(assignee.full_name)}</a> —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ."
                ),
                disable_web_page_preview=True
            )
        except Exception:
            pass
        return

    # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –õ–°
    try:
        await bot.send_message(
            assigner_id,
            f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {quote_html(assignee.full_name)} –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –µ–º—É –≤ –õ–°."
        )
    except Exception:
        pass

@dp.message_handler(commands=["mytasks"])
async def cmd_mytasks(message: types.Message):
    # –í –≥—Ä—É–ø–ø–µ ‚Äî —É–¥–∞–ª—è–µ–º –∏ —à–ª—ë–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –õ–°
    if message.chat.type in (types.ChatType.GROUP, types.ChatType.SUPERGROUP):
        await safe_delete(message)
        uid = message.from_user.id
    else:
        uid = message.from_user.id

    tasks = await list_tasks_for_assignee(uid, only_open=True)
    if not tasks:
        try:
            await bot.send_message(uid, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á ‚ú®")
        except Exception:
            pass
        return

    lines = ["<b>–í–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏:</b>"]
    for (tid, chat_id, text, created_at, due, is_done) in tasks:
        lines.append(f"#{tid}: {quote_html(text)}")
    lines.append("\n–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å: /done <id>")
    try:
        await bot.send_message(uid, "\n".join(lines))
    except Exception:
        pass

@dp.message_handler(commands=["done"])
async def cmd_done(message: types.Message):
    # –í –≥—Ä—É–ø–ø–µ ‚Äî —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –õ–°
    if message.chat.type in (types.ChatType.GROUP, types.ChatType.SUPERGROUP):
        await safe_delete(message)
        uid = message.from_user.id
        args = message.get_args().strip()
        # –ü–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è; –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤ –õ–°
        try:
            if not args:
                await bot.send_message(uid, "–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /done <id>")
                return
        except Exception:
            return
    else:
        uid = message.from_user.id
        args = message.get_args().strip()

    if not args.isdigit():
        try:
            await bot.send_message(uid, "–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /done <id>")
        except Exception:
            pass
        return

    ok = await mark_done(int(args))
    try:
        if ok:
            await bot.send_message(uid, "–ì–æ—Ç–æ–≤–æ! –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ ‚úÖ")
        else:
            await bot.send_message(uid, "–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
    except Exception:
        pass

# -------------------------------------------------
# Callbacks (menu buttons) ‚Äî —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –õ–°
# -------------------------------------------------
@dp.callback_query_handler(lambda c: c.data == "menu_assign")
async def cb_menu_assign(call: types.CallbackQuery):
    await call.answer()
    txt = (
        "–í –≥—Ä—É–ø–ø–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "
        "<code>/assign —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏</code>.\n"
        "–ö–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞. –ë–æ—Ç –≤ –æ–±—â–∏–π —á–∞—Ç –Ω–µ –ø–∏—à–µ—Ç."
    )
    try:
        await call.message.edit_text(txt, reply_markup=menu_kb(), disable_web_page_preview=True)
    except Exception:
        pass

@dp.callback_query_handler(lambda c: c.data == "menu_mytasks")
async def cb_menu_mytasks(call: types.CallbackQuery):
    await call.answer()
    tasks = await list_tasks_for_assignee(call.from_user.id, only_open=True)
    if not tasks:
        try:
            await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á ‚ú®", reply_markup=menu_kb())
        except Exception:
            pass
        return
    lines = ["<b>–í–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏:</b>"]
    for (tid, chat_id, text, created_at, due, is_done) in tasks:
        lines.append(f"#{tid}: {quote_html(text)}")
    lines.append("\n–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å: /done <id>")
    try:
        await call.message.edit_text("\n".join(lines), reply_markup=menu_kb())
    except Exception:
        pass

# -------------------------------------------------
# Scheduler: daily reminders @ 10:00 Europe/Stockholm (Mon-Fri)
# -------------------------------------------------
async def send_daily_reminders():
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤ –õ–°
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT DISTINCT assignee_id FROM tasks WHERE is_done=0")
        assignees = [row[0] for row in await cur.fetchall()]
    if not assignees:
        return

    for uid in assignees:
        tasks = await list_tasks_for_assignee(uid, only_open=True)
        if not tasks:
            continue
        lines = ["üîî <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>", "–í–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏:"]
        for (tid, chat_id, text, created_at, due, is_done) in tasks:
            lines.append(f"#{tid}: {quote_html(text)}")
        lines.append("\n–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É: /done <id>")
        try:
            await bot.send_message(uid, "\n".join(lines))
        except Exception:
            pass

scheduler: Optional[AsyncIOScheduler] = None

async def on_startup(dispatcher: Dispatcher):
    await init_db()

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
    commands = [
        BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand("assign", "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É (–≤ –≥—Ä—É–ø–ø–µ –ø–æ —Ä–µ–ø–ª–∞—é)"),
        BotCommand("mytasks", "–ú–æ–∏ –∑–∞–¥–∞—á–∏"),
        BotCommand("done", "–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID"),
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeAllPrivateChats())
    await bot.set_my_commands(commands, scope=BotCommandScopeAllGroupChats())

    global scheduler
    if scheduler is None:
        scheduler = AsyncIOScheduler(timezone=ctx.tz)
        # 10:00 Mon-Fri
        trigger = CronTrigger(day_of_week="mon-fri", hour=10, minute=0, timezone=ctx.tz)
        scheduler.add_job(lambda: asyncio.create_task(send_daily_reminders()), trigger)
        scheduler.start()
        logger.info("Scheduler started for 10:00 %s on weekdays", TZ)

async def on_shutdown(dispatcher: Dispatcher):
    global scheduler
    if scheduler:
        scheduler.shutdown(wait=False)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
